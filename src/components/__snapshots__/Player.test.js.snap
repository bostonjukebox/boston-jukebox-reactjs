// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Player renders without crashing 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <section>
    <ReactFlipCard
        disabled={true}
        flipped={false}
        type="horizontal"
    >
        <styled.section>
            <styled.p>
                No song playing :-(
            </styled.p>
            
            
            <styled.button
                onClick={[Function]}
                type="button"
            >
                Go to multitrack mode
            </styled.button>
        </styled.section>
        <styled.section>
            <MultiTrack
                playing={false}
            />
            <styled.button
                onClick={[Function]}
                type="button"
            >
                Go to single track mode
            </styled.button>
        </styled.section>
    </ReactFlipCard>
    <Vinyl
        playing={false}
    />
</section>,
  "nodes": Array [
    <section>
      <ReactFlipCard
            disabled={true}
            flipped={false}
            type="horizontal"
      >
            <styled.section>
                  <styled.p>
                        No song playing :-(
                  </styled.p>
                  
                  
                  <styled.button
                        onClick={[Function]}
                        type="button"
                  >
                        Go to multitrack mode
                  </styled.button>
            </styled.section>
            <styled.section>
                  <MultiTrack
                        playing={false}
                  />
                  <styled.button
                        onClick={[Function]}
                        type="button"
                  >
                        Go to single track mode
                  </styled.button>
            </styled.section>
      </ReactFlipCard>
      <Vinyl
            playing={false}
      />
</section>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Player />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Player {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "showBack": [Function],
        "showFront": [Function],
        "socket": Socket {
          "_callbacks": Object {
            "$connect": Array [
              [Function],
            ],
            "$connecting": Array [
              [Function],
            ],
            "$objectTouched": Array [
              [Function],
            ],
          },
          "acks": Object {},
          "connected": false,
          "disconnected": true,
          "ids": 0,
          "io": Manager {
            "_callbacks": Object {
              "$close": Array [
                [Function],
              ],
              "$open": Array [
                [Function],
              ],
              "$packet": Array [
                [Function],
              ],
            },
            "_randomizationFactor": 0.5,
            "_reconnection": true,
            "_reconnectionAttempts": Infinity,
            "_reconnectionDelay": 1000,
            "_reconnectionDelayMax": 5000,
            "_timeout": 20000,
            "autoConnect": true,
            "backoff": Backoff {
              "attempts": 0,
              "factor": 2,
              "jitter": 0.5,
              "max": 5000,
              "ms": 1000,
            },
            "connecting": Array [
              [Circular],
            ],
            "decoder": Decoder {
              "reconstructor": null,
            },
            "encoder": Encoder {},
            "encoding": false,
            "engine": Socket {
              "_callbacks": Object {
                "$error": Array [
                  [Function],
                ],
                "$open": Array [
                  [Function],
                ],
              },
              "agent": false,
              "binaryType": null,
              "ca": null,
              "cert": null,
              "ciphers": null,
              "enablesXDR": false,
              "forceBase64": false,
              "forceJSONP": false,
              "forceNode": false,
              "hostname": "localhost",
              "id": null,
              "jsonp": true,
              "key": null,
              "onlyBinaryUpgrades": undefined,
              "passphrase": null,
              "path": "/socket.io/",
              "perMessageDeflate": Object {
                "threshold": 1024,
              },
              "pfx": null,
              "pingInterval": null,
              "pingIntervalTimer": null,
              "pingTimeout": null,
              "pingTimeoutTimer": null,
              "policyPort": 843,
              "port": "9091",
              "prevBufferLen": 0,
              "query": Object {},
              "readyState": "opening",
              "rejectUnauthorized": true,
              "rememberUpgrade": false,
              "secure": false,
              "timestampParam": "t",
              "timestampRequests": undefined,
              "transport": XHR {
                "_callbacks": Object {
                  "$close": Array [
                    [Function],
                  ],
                  "$drain": Array [
                    [Function],
                  ],
                  "$error": Array [
                    [Function],
                  ],
                  "$packet": Array [
                    [Function],
                  ],
                },
                "agent": false,
                "ca": null,
                "cert": null,
                "ciphers": null,
                "enablesXDR": false,
                "extraHeaders": undefined,
                "forceNode": false,
                "hostname": "localhost",
                "key": null,
                "localAddress": undefined,
                "passphrase": null,
                "path": "/socket.io/",
                "pfx": null,
                "pollXhr": Request {
                  "_callbacks": Object {
                    "$data": Array [
                      [Function],
                    ],
                    "$error": Array [
                      [Function],
                    ],
                  },
                  "agent": false,
                  "async": true,
                  "ca": null,
                  "cert": null,
                  "ciphers": null,
                  "data": null,
                  "enablesXDR": false,
                  "extraHeaders": undefined,
                  "index": 0,
                  "isBinary": undefined,
                  "key": null,
                  "method": "GET",
                  "passphrase": null,
                  "pfx": null,
                  "rejectUnauthorized": true,
                  "requestTimeout": undefined,
                  "supportsBinary": false,
                  "uri": "http://localhost:9091/socket.io/?EIO=3&transport=polling&t=LysYweD&b64=1",
                  "xd": true,
                  "xhr": XMLHttpRequest {
                    "DONE": 4,
                    "HEADERS_RECEIVED": 2,
                    "LOADING": 3,
                    "OPENED": 1,
                    "UNSENT": 0,
                    "abort": [Function],
                    "addEventListener": [Function],
                    "dispatchEvent": [Function],
                    "getAllResponseHeaders": [Function],
                    "getRequestHeader": [Function],
                    "getResponseHeader": [Function],
                    "handleError": [Function],
                    "onreadystatechange": [Function],
                    "open": [Function],
                    "readyState": 1,
                    "removeEventListener": [Function],
                    "responseText": "",
                    "responseXML": "",
                    "send": [Function],
                    "setDisableHeaderCheck": [Function],
                    "setRequestHeader": [Function],
                    "status": null,
                    "statusText": null,
                  },
                  "xs": false,
                },
                "polling": true,
                "port": "9091",
                "query": Object {
                  "EIO": 3,
                  "b64": 1,
                  "t": "LysYweD",
                  "transport": "polling",
                },
                "readyState": "opening",
                "rejectUnauthorized": true,
                "requestTimeout": undefined,
                "secure": false,
                "socket": [Circular],
                "supportsBinary": false,
                "timestampParam": "t",
                "timestampRequests": undefined,
                "xd": true,
                "xs": false,
              },
              "transportOptions": Object {},
              "transports": Array [
                "polling",
                "websocket",
              ],
              "upgrade": true,
              "upgrades": null,
              "writeBuffer": Array [],
            },
            "lastPing": null,
            "nsps": Object {
              "/": [Circular],
            },
            "opts": Object {
              "hostname": "localhost",
              "path": "/socket.io",
              "port": "9091",
              "secure": false,
            },
            "packetBuffer": Array [],
            "readyState": "opening",
            "skipReconnect": false,
            "subs": Array [
              Object {
                "destroy": [Function],
              },
              Object {
                "destroy": [Function],
              },
              Object {
                "destroy": [Function],
              },
            ],
            "uri": "http://localhost:9091",
          },
          "json": [Circular],
          "nsp": "/",
          "receiveBuffer": Array [],
          "sendBuffer": Array [],
          "subs": Array [
            Object {
              "destroy": [Function],
            },
            Object {
              "destroy": [Function],
            },
            Object {
              "destroy": [Function],
            },
          ],
        },
        "state": Object {
          "flipped": false,
          "index": null,
          "numberOfSongs": 11,
          "playing": false,
          "songs": Array [
            Object {
              "author": "Marty Kings",
              "img": "image2.jpg",
              "path": "myway-martykings.mp3",
              "title": "My Way",
            },
            Object {
              "author": "Covey",
              "img": "image3.jpg",
              "path": "comesandgoes-covey.mp3",
              "title": "Comes and Goes",
            },
            Object {
              "author": "Future Teens",
              "img": "image4.jpg",
              "path": "girlfriend-futureteens.mp3",
              "title": "Girlfriend on a gap year",
            },
            Object {
              "author": "Viva La Hop",
              "img": "image5.jpg",
              "path": "work-vivalahop.mp3",
              "title": "Work",
            },
            Object {
              "author": "Darling Side",
              "img": "image6.jpg",
              "path": "whitehorses-darlingside.mp3",
              "title": "White Horse",
            },
            Object {
              "author": "Waldo the Band",
              "img": "image7.jpg",
              "path": "protector-waldo.mp3",
              "title": "Protector",
            },
            Object {
              "author": "Kristina Stapelfeld",
              "img": "image8.jpg",
              "path": "takingchances-kristinastapelfeld.mp3",
              "title": "Taking Chances",
            },
            Object {
              "author": "Goldbloc",
              "img": "image9.jpg",
              "path": "daysaredreaming-goldbloc.mp3",
              "title": "Days are dreaming",
            },
            Object {
              "author": "",
              "img": "",
              "path": "vocals.mp3",
              "title": "Vocal",
            },
            Object {
              "author": "",
              "img": "",
              "path": "guitar.mp3",
              "title": "Guitar",
            },
            Object {
              "author": "",
              "img": "",
              "path": "drums.mp3",
              "title": "Drums",
            },
          ],
          "volume": 1,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <section>
          <ReactFlipCard
                    disabled={true}
                    flipped={false}
                    type="horizontal"
          >
                    <styled.section>
                              <styled.p>
                                        No song playing :-(
                              </styled.p>
                              
                              
                              <styled.button
                                        onClick={[Function]}
                                        type="button"
                              >
                                        Go to multitrack mode
                              </styled.button>
                    </styled.section>
                    <styled.section>
                              <MultiTrack
                                        playing={false}
                              />
                              <styled.button
                                        onClick={[Function]}
                                        type="button"
                              >
                                        Go to single track mode
                              </styled.button>
                    </styled.section>
          </ReactFlipCard>
          <Vinyl
                    playing={false}
          />
</section>,
        "_debugID": 2,
        "_renderedOutput": <section>
          <ReactFlipCard
                    disabled={true}
                    flipped={false}
                    type="horizontal"
          >
                    <styled.section>
                              <styled.p>
                                        No song playing :-(
                              </styled.p>
                              
                              
                              <styled.button
                                        onClick={[Function]}
                                        type="button"
                              >
                                        Go to multitrack mode
                              </styled.button>
                    </styled.section>
                    <styled.section>
                              <MultiTrack
                                        playing={false}
                              />
                              <styled.button
                                        onClick={[Function]}
                                        type="button"
                              >
                                        Go to single track mode
                              </styled.button>
                    </styled.section>
          </ReactFlipCard>
          <Vinyl
                    playing={false}
          />
</section>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Player />,
}
`;
